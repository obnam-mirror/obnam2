# Note that all fields that take a lint level have these possible values:
# * deny - An error will be produced and the check will fail
# * warn - A warning will be produced, but the check will not fail
# * allow - No warning or error will be produced, though in some cases a note
# will be

[advisories]
db-path = "~/.cargo/advisory-db"
db-urls = ["https://github.com/rustsec/advisory-db"]
vulnerability = "deny"
unmaintained = "warn"
yanked = "deny"
notice = "deny"
ignore = [
    "RUSTSEC-2020-0027",
    "RUSTSEC-2020-0071",
    "RUSTSEC-2020-0159",
]

[licenses]
unlicensed = "deny"
allow = [
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-3-Clause",
    "ISC",
    "LicenseRef-ring",
    "MIT",
]
deny = [
    #"Nokia",
]
copyleft = "allow"
default = "deny"
exceptions = [
    # Each entry is the crate and version constraint, and its specific allow
    # list
    #{ allow = ["Zlib"], name = "adler32", version = "*" },
]

[[licenses.clarify]]
name = "encoding_rs"
version = "*"
expression = "(Apache-2.0 OR MIT) AND BSD-3-Clause"
license-files = [
    { path = "COPYRIGHT", hash = 0x39f8ad31 }
]

[[licenses.clarify]]
name = "ring"
expression = "LicenseRef-ring"
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 },
]

[bans]
multiple-versions = "allow"
wildcards = "allow"
highlight = "all"
allow = [
    #{ name = "ansi_term", version = "=0.11.0" },
]
deny = [
    # Each entry the name of a crate and a version range. If version is
    # not specified, all versions will be matched.
    #{ name = "ansi_term", version = "=0.11.0" },
    #
    # Wrapper crates can optionally be specified to allow the crate when it
    # is a direct dependency of the otherwise banned crate
    #{ name = "ansi_term", version = "=0.11.0", wrappers = [] },
]
skip = [
    #{ name = "ansi_term", version = "=0.11.0" },
]
skip-tree = [
    #{ name = "ansi_term", version = "=0.11.0", depth = 20 },
]

[sources]
unknown-registry = "warn"
unknown-git = "warn"
allow-git = []
