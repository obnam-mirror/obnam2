- given: "a running chunk server"
  impl:
    python:
      function: start_chunk_server
      cleanup: stop_chunk_server

- given: "a running chunk server with environment {env:text}"
  impl:
    python:
      function: start_chunk_server
      cleanup: stop_chunk_server

- when: "the chunk server is stopped"
  impl:
    python:
      function: stop_chunk_server

- when: "I POST (?P<filename>\\S+) to (?P<path>\\S+), with (?P<header>\\S+): (?P<json>.*)"
  regex: true
  impl:
    python:
      function: post_file

- when: "I GET /chunks/<{var}>"
  impl:
    python:
      function: get_chunk_via_var

- when: "I try to GET /chunks/{chunk_id}"
  impl:
    python:
      function: get_chunk_by_id

- when: "I GET /chunks?sha256={sha}"
  regex: false
  impl:
    python:
      function: find_chunks_with_sha

- when: "I DELETE /chunks/<{var}>"
  impl:
    python:
      function: delete_chunk_via_var

- when: "I try to DELETE /chunks/{chunk_id}"
  impl:
    python:
      function: delete_chunk_by_id

- when: "chunk <{chunk_id}> on chunk server is replaced by an empty file"
  impl:
    python:
      function: make_chunk_file_be_empty

- then: "HTTP status code is {status}"
  impl:
    python:
      function: status_code_is

- then: "{header} is {value}"
  impl:
    python:
      function: header_is

- then: "the JSON body has a field {field}, henceforth {var}"
  impl:
    python:
      function: remember_json_field

- then: "the JSON body matches (?P<wanted>.*)"
  regex: true
  impl:
    python:
      function: json_body_matches

- then: "the body matches file {filename}"
  impl:
    python:
      function: body_matches_file

- then: "server has {n:int} chunks"
  impl:
    python:
      function: server_has_n_chunks

- then: chunk server's stderr contains "{wanted:text}"
  impl:
    python:
      function: server_stderr_contains

- then: chunk server's stderr doesn't contain "{wanted:text}"
  impl:
    python:
      function: server_stderr_doesnt_contain
